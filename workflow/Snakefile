#Pipeline for DRM calling
#Here we will read config file which contains information about which tools to use
#for alignment and variant calling, and write rules to decide will rules in the rules folder to call.

# Parse Bowtie2 parameters.
#TODO Error checks
bowtie2_params = config["bowtie2_params"]
bowtie2_params_group_names = bowtie2_params[1:]
bowtie2_params_header = bowtie2_params[0]
bowtie2_params_dict = {}
for param_list in bowtie2_params[1:]:
    group_name = param_list[0]
    bowtie2_params_dict[group_name] = dict(zip(bowtie2_params_header,param_list))

config['bowtie2_params_dict'] = bowtie2_params_dict
#print(config['bowtie2_params_dict'] )

# Parse LAST parameters.
#TODO Error checks
last_params = config["last_params"]
last_params_group_names = last_params[1:]
last_params_header = last_params[0]
last_params_dict = {}
for param_list in last_params[1:]:
    group_name = param_list[0]
    last_params_dict[group_name] = dict(zip(last_params_header,param_list))

config['last_params_dict'] = last_params_dict
# print(config['last_params_dict'] )

lofreq_params = config["lofreq_params"]
lofreq_params_group_names = lofreq_params[0][1:]
lofreq_params_header = lofreq_params[0]
lofreq_params_dict = {}

for param_list in lofreq_params[1:]:
    group_name = param_list[0]
    lofreq_params_dict[group_name] = dict(zip(lofreq_params_header[1:], param_list[1:]))

config['lofreq_params_dict'] = lofreq_params_dict


include: "rules/count_alns.smk"
include: "rules/filter_reads.smk"
include: "rules/bowtie2.smk"
include: "rules/last.smk"
include: "rules/bam.smk"
include: "rules/lofreq.smk"
include: "rules/hivdb_query.smk"
include: "rules/blast.smk"
# include: "rules/map_to_hxb2.smk"
include: "rules/last_SE.smk"
include: "rules/gatk.smk"
include: "rules/bcftools.smk"

# Rule to generate drug resistance report
rule all:
     input:
         expand("{out_dir}/drug_resistance_report/{country}/{sample_id}_to_{reference_name}/paramgroup_{param_group}/results_{aligner}.txt",
                out_dir = config['out_dir'],
                reference_name = config['reference_name'],
                sample_id =  config['reads'].keys(),
                aligner = config['aligner'],
                country = config['country'],
                param_group = config['last_params_dict'].keys(),
                # param_group = config['{}_params_dict'.format(config['aligner'])].keys(),
            )

# LAST TRAINED Rule to generate drug resistance report
# rule all:
#      input:
#          expand("{out_dir}/drug_resistance_report_filtered/{country}/{sample_id}_to_{reference_name}/paramgroup_{param_group}/results_{aligner}_{lofreq_param_group}.txt",
#                 out_dir = config['out_dir'],
#                 reference_name = config['reference_name'],
#                 sample_id =  config['reads'].keys(),
#                 aligner = config['aligner'],
#                 country = config['country'],
#                 param_group = config['last_params_dict'].keys(),
#                 # param_group = config['{}_params_dict'.format(config['aligner'])].keys(),
#                 lofreq_param_group = config['lofreq_params_dict'].keys()
#             )


# rule all:               
    # input:
    #     expand("{out_dir}/alignment_analysis/to_{reference_name}/plot_alns_{country}.tsv",
    #             out_dir = config['out_dir'],
    #             reference_name = config['reference_name'],
    #             sample_id =  config['reads'].keys(),
    #             aligner = config['aligner'],
    #             country = config['country'],
    #             param_group = config['{}_params_dict'.format(config['aligner'])].keys()
    #         )
    
# rule all:  
#     input:
#         expand("{out_dir}/alignment_analysis/to_{reference_name}/alignments_plot_{country}.pdf",
#                 out_dir = config['out_dir'],
#                 reference_name = config['reference_name'],
#                 sample_id =  config['reads'].keys(),
#                 aligner = config['aligner'],
#                 country = config['country'],
#                 param_group = config['last_params_dict'].keys(),
#                 lofreq_param_group = config['lofreq_params_dict'].keys()
#         )