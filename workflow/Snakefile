#Pipeline for DRM calling
#Here we will read config file which contains information about which tools to use
#for alignment and variant calling, and write rules to decide will rules in the rules folder to call.

# Parse Bowtie2 parameters.
#TODO Error checks
bowtie2_params = config["bowtie2_params"]
bowtie2_params_group_names = bowtie2_params[1:]
bowtie2_params_header = bowtie2_params[0]
bowtie2_params_dict = {}
for param_list in bowtie2_params[1:]:
    group_name = param_list[0]
    bowtie2_params_dict[group_name] = dict(zip(bowtie2_params_header,param_list))

config['bowtie2_params_dict'] = bowtie2_params_dict
#print(config['bowtie2_params_dict'] )

# Parse LAST parameters.
#TODO Error checks
last_params = config["last_params"]
last_params_group_names = last_params[1:]
last_params_header = last_params[0]
last_params_dict = {}
for param_list in last_params[1:]:
    group_name = param_list[0]
    last_params_dict[group_name] = dict(zip(last_params_header,param_list))

config['last_params_dict'] = last_params_dict


include: "rules/filter_reads.smk"
include: "rules/bowtie2.smk"
include: "rules/last.smk"
include: "rules/bam.smk"
include: "rules/variant_calling.smk"
include: "rules/hivdb_query.smk"


rule all:
     input:
         expand("{out_dir}/drug_resistance_report/{sample_id}/paramgroup_{param_group}/results_{aligner}.txt",
                out_dir = config['out_dir'],
                sample_id =  config['reads'].keys(),
                aligner = config['aligner'],
                param_group = config['{}_params_dict'.format(config['aligner'])].keys()
               )
